/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  FetchPluginModal: () => FetchPluginModal,
  default: () => SwissArmyKnifePlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var mobileOnlyCorsProxy = "https://api.codetabs.com/v1/proxy?quest=";
var SwissArmyKnifePlugin = class extends import_obsidian.Plugin {
  async onload() {
    this.addCommand({
      id: "replace-doubled-empty-lines-with-single",
      name: "Replace doubled empty lines with single",
      editorCallback: (editor, view) => this.replaceDoubledEmptyLinesWithSingle(editor)
    });
    this.addCommand({
      id: "remove-empty-lines",
      name: "Remove empty lines",
      editorCallback: (editor, view) => this.removeEmptyLines(editor)
    });
    this.addCommand({
      id: "fetch-plugin-version",
      name: "Fetch plugin version",
      callback: () => new FetchPluginModal(this.app, (url) => fetchPluginRelease(url, this.app)).open()
    });
  }
  replaceDoubledEmptyLinesWithSingle(editor) {
    const doubledEmptyLinesWithOptionalWhiteSpacesRegex = /^\s*?\n\s*?\n/gm;
    return replaceRegexInFile(editor, doubledEmptyLinesWithOptionalWhiteSpacesRegex, "\n");
  }
  removeEmptyLines(editor) {
    const emptyLinesWithOptionalWhitespacesRegex = /\s*?\n\s*?\n/gm;
    return replaceRegexInFile(editor, emptyLinesWithOptionalWhitespacesRegex, "\n");
  }
};
function replaceRegexInFile(editor, pattern, replacement) {
  const currentText = editor.getValue();
  const updatedText = currentText.replace(pattern, replacement);
  editor.setValue(updatedText);
}
async function fetchPluginRelease(ghRepoUrl, app) {
  try {
    const { origin, pathname } = new URL(ghRepoUrl);
    const [, username, pluginName, , , release] = pathname.split("/");
    const fetchAddr = [origin, username, pluginName, "releases", "download", release].join("/");
    const toBeFetched = ["main.js", "manifest.json", "styles.css"];
    const fetchedElements = await Promise.all(toBeFetched.map(async (e) => [e, await (await fetchDataIgnoreCorsIfNeeded(fetchAddr + "/" + e)).text()]));
    const existingElements = fetchedElements.filter(([, content]) => !content.includes("Not Found"));
    const containsRequiredData = existingElements.length >= 2;
    if (!containsRequiredData) {
      throw new Error("Error fetching main.js and/or manifest.json");
    }
    const pluginsPath = ".obsidian/plugins/";
    const fullPluginPath = pluginsPath + pluginName;
    app.vault.createFolder(fullPluginPath);
    existingElements.map(([filename, content]) => {
      app.vault.create(fullPluginPath + "/" + filename, content);
    });
    new InfoModal(this.app, "Successfully installed " + pluginName + " release: " + release + ". Please restart Obsidian to make changes visible.").open();
  } catch (err) {
    new InfoModal(this.app, err.message).open();
  }
}
async function fetchDataIgnoreCorsIfNeeded(url) {
  const { isMobile } = import_obsidian.Platform;
  return await fetch(isMobile ? mobileOnlyCorsProxy + url : url);
}
var FetchPluginModal = class extends import_obsidian.Modal {
  constructor(app, onSubmit) {
    super(app);
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h1", { text: "Fetch plugin release" });
    new import_obsidian.Setting(contentEl).setName("GH Release url").addText((text) => text.onChange((value) => {
      this.result = value;
    }));
    new import_obsidian.Setting(contentEl).addButton((btn) => btn.setButtonText("Process").setCta().onClick(() => {
      this.close();
      this.onSubmit(this.result);
    }));
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var InfoModal = class extends import_obsidian.Modal {
  constructor(app, msg) {
    super(app);
    this.message = msg;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.setText(this.message);
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
